set nocompatible " Be iMproved
filetype off

" vim-plug
call plug#begin('~/.vim/plugged')

" Themes
Plug 'altercation/vim-colors-solarized'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Common stuff
Plug 'jamessan/vim-gnupg'
Plug 'tpope/vim-fugitive'
Plug 'vitapluvia/vim-gurl'
Plug 'unblevable/quick-scope'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug '/usr/local/opt/fzf' | Plug 'junegunn/fzf.vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'google/vim-searchindex'
Plug 'junegunn/limelight.vim'
Plug 'junegunn/goyo.vim'
Plug 'godlygeek/tabular'

" Completion, lint, fix
Plug 'w0rp/ale'
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'Shougo/neosnippet.vim'
Plug 'Shougo/neosnippet-snippets'
Plug 'jiangmiao/auto-pairs'

" Language specific plugins
Plug 'hashivim/vim-terraform'
Plug 'rust-lang/rust.vim', {'for': 'rust'}
Plug 'kchmck/vim-coffee-script', {'for': 'coffee'}
Plug 'elzr/vim-json', {'for': 'json'}
Plug 'uarun/vim-protobuf', {'for': 'proto'}
Plug 'elixir-lang/vim-elixir', {'for': 'elixir'}

" Games :)
Plug 'johngrib/vim-game-code-break'

" Add plugins to runtime
call plug#end()

filetype plugin indent on

" Silent errors if colorscheme not exist
silent! colorscheme solarized
set t_Co=256 " true colors

" Global
syntax on
set background=dark
set timeoutlen=1000
set ttimeoutlen=0
set encoding=utf-8
set fileencoding=utf-8
set number
set relativenumber
set numberwidth=1
set modeline
set modelines=5
set laststatus=2
set undofile
set undodir=$HOME/.vim/undo
" set mouse=nv
set cursorline
set cursorcolumn
set autowrite
set backspace=2

" Search settings
set incsearch     " show search matches as you type
set showmatch
set hlsearch
set smartcase	  " ignore case if search pattern is all lowercase, case-sensitive otherwise
set ignorecase
nnoremap <Space> :let @/=""<CR>

" custom mappings
map <C-n> :cnext<CR>
map <C-m> :cprevious<CR>
nnoremap <leader>a :cclose<CR>

" deoplete
let g:deoplete#enable_at_startup = 1

" ale
let g:ale_completion_enabled = 1
let g:ale_fix_on_save = 1
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_linters = { 'go': ['gopls', 'golint', 'govet', 'staticcheck'] }
let g:ale_fixers = { 'go': ['goimports'] }
" let g:ale_set_balloons = 1

" ale mappings
nmap <Leader>gd <Plug>(ale_hover)
nmap <Leader>g <Plug>(ale_go_to_definition)
nmap <Leader>ds <Plug>(ale_go_to_definition_in_split)
nmap <Leader>dv <Plug>(ale_go_to_definition_in_vsplit)
nmap <Leader>dt <Plug>(ale_go_to_definition_in_tab)

" neosnippet
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)

" rust.vim
let g:rustfmt_autosave = 1

" airline
let g:airline_right_sep=''
let g:airline_left_sep=''
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ''
let g:airline_powerline_fonts = 1

" limelight
let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_ctermfg = 240
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!

" terraform
let g:terraform_fmt_on_save = 1

" FZF
nnoremap <Leader>f :Files<CR>
nnoremap <Leader>b :Buffers<CR>
nnoremap <Leader>l :Lines<CR>
nnoremap <Leader>c :BCommits<CR>

" Language specifics
autocmd FileType ruby setlocal shiftwidth=2 sts=2 expandtab smartindent
autocmd FileType yaml setlocal shiftwidth=2 sts=2 expandtab smartindent
autocmd FileType javascript setlocal shiftwidth=2 sts=2 expandtab smartindent
autocmd FileType html setlocal shiftwidth=2 sts=2 expandtab smartindent
autocmd BufNewFile,BufReadPost *.coffee setl shiftwidth=2 expandtab
