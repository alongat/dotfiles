set nocompatible " Be iMproved
filetype off

" vim-plug
call plug#begin('~/.vim/plugged')

" Themes
Plug 'morhetz/gruvbox'
" Plug 'vim-airline/vim-airline'
Plug 'hoob3rt/lualine.nvim'

" Common stuff
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-fugitive' " Git client
Plug 'tpope/vim-unimpaired'
Plug 'APZelos/blamer.nvim'
Plug 'f-person/git-blame.nvim'
Plug 'vitapluvia/vim-gurl' " Github URL to clipboard
Plug 'editorconfig/editorconfig-vim'
Plug 'junegunn/limelight.vim'
Plug 'junegunn/goyo.vim'
Plug 'godlygeek/tabular'

" Search and navigation
Plug '/usr/local/opt/fzf' | Plug 'junegunn/fzf.vim'
Plug 'ojroques/nvim-lspfuzzy' " FZF navigation for LSP
Plug 'unblevable/quick-scope'
Plug 'google/vim-searchindex'
Plug 'mcchrish/nnn.vim'

" Completion, lint, fix
Plug 'jiangmiao/auto-pairs'
Plug 'Shougo/neosnippet.vim'
Plug 'Shougo/neosnippet-snippets'
Plug 'neovim/nvim-lspconfig'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

Plug 'nvim-lua/completion-nvim'
Plug 'steelsojka/completion-buffers'
Plug 'nvim-treesitter/completion-treesitter'

" Plug 'hrsh7th/nvim-cmp'
" Plug 'hrsh7th/cmp-nvim-lsp'
" Plug 'hrsh7th/cmp-buffer'
" Plug 'hrsh7th/cmp-path'
" Plug 'notomo/cmp-neosnippet'

" Language specific plugins
Plug 'hashivim/vim-terraform'
Plug 'rust-lang/rust.vim', {'for': 'rust'}
Plug 'elixir-lang/vim-elixir', {'for': 'elixir'}

" Add plugins to runtime
call plug#end()

filetype plugin indent on

" Silent errors if colorscheme not exist
silent! colorscheme gruvbox
set termguicolors

" Global
syntax on
set background=dark
set timeoutlen=1000
set ttimeoutlen=0
set encoding=utf-8
set fileencoding=utf-8
set number
set relativenumber
set numberwidth=1
set modeline
set modelines=5
set laststatus=2
set undofile
set undodir=$HOME/.vim/undo
set noshowcmd
set cursorline
set cursorcolumn
set autowrite
set backspace=2
set completeopt=menuone,noinsert,noselect
set shortmess+=c

" Search settings
set incsearch " show search matches as you type
set showmatch
set hlsearch
set smartcase " ignore case if search pattern is all lowercase, case-sensitive otherwise
set ignorecase
set clipboard+=unnamedplus " add clipboard support
nnoremap <Space> :let @/=""<CR>

" custom mappings
map <C-n> :cnext<CR>
map <C-m> :cprevious<CR>
nnoremap <leader>a :cclose<CR>

" Using tmux/screen with ctrl-a 
nnoremap + <C-a>
nnoremap - <C-x>
xnoremap + g<C-a>
xnoremap - g<C-x>

" completion-nvim
let g:completion_auto_change_source = 1
let g:completion_enable_snippet = 'Neosnippet'
autocmd BufEnter * lua require'completion'.on_attach()

lua <<END
require('lualine').setup{}

local lspconfig = require 'lspconfig'
lspconfig.gopls.setup{}
lspconfig.jsonls.setup{}
lspconfig.vuels.setup{}
lspconfig.yamlls.setup{}
lspconfig.tsserver.setup{}
lspconfig.bashls.setup{}
lspconfig.terraformls.setup{}

require('lspfuzzy').setup{}

require'nvim-treesitter.configs'.setup {
  -- ensure_installed = "all",
  highlight = {
    enable = true,
  },
}

vim.g.completion_chain_complete_list = {
  { complete_items = { 'lsp' } },
  { complete_items = { 'ts' } },
  -- { complete_items = { 'snippet' } },
  { complete_items = { 'buffers' } },
  { complete_items = { 'path' } },
  { mode = { '<c-p>' } },
  { mode = { '<c-n>' } }
}

-- local cmp = require'cmp'
-- cmp.setup({
--   snippet = {
--     expand = function(args)
--     -- unused due to neosnippet
--     end,
--   },
--   mapping = {
--     ['<C-d>'] = cmp.mapping.scroll_docs(-4),
--     ['<C-f>'] = cmp.mapping.scroll_docs(4),
--     -- ['<C-Space>'] = cmp.mapping.complete(),
--     ['<C-e>'] = cmp.mapping.close(),
--     ['<CR>'] = cmp.mapping.confirm({ select = true }),
--   },
--   sources = {
--     { name = 'nvim_lsp' },
--     { name = 'buffer' },
--     { name = 'neosnippet' },
--     { name = 'path' },
--   }
-- })
END

" Neovim LSP
nnoremap <silent> <c-]> <cmd>lua vim.lsp.buf.declaration()<CR>
nnoremap <silent> gd 	<cmd>lua vim.lsp.buf.definition()<CR>
nnoremap <silent> K     <cmd>lua vim.lsp.buf.hover()<CR>
nnoremap <silent> gD    <cmd>lua vim.lsp.buf.implementation()<CR>
nnoremap <silent> <c-k> <cmd>lua vim.lsp.buf.signature_help()<CR>
nnoremap <silent> 1gD   <cmd>lua vim.lsp.buf.type_definition()<CR>
nnoremap <silent> gr    <cmd>lua vim.lsp.buf.references()<CR>
nnoremap <silent> g0    <cmd>lua vim.lsp.buf.document_symbol()<CR>
nnoremap <silent> gW    <cmd>lua vim.lsp.buf.workspace_symbol()<CR>
nnoremap <silent> <F2>  <cmd>lua vim.lsp.buf.rename()<CR>

" neosnippet
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)

" rust.vim
let g:rustfmt_autosave = 1

" limelight
let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_ctermfg = 240
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!

" terraform
let g:terraform_fmt_on_save = 1

" FZF
nnoremap <Leader>f :Files<CR>
nnoremap <Leader>b :Buffers<CR>
nnoremap <Leader>l :Lines<CR>
nnoremap <Leader>c :BCommits<CR>
nnoremap <Leader>g :Rg<CR>

" nnn
let g:nnn#layout = { 'left': '~20%' }

" Base64 decode selection
vnoremap <leader>64 c<c-r>=system('base64 --decode', @")<cr><esc>

" Language specifics
autocmd FileType ruby setlocal shiftwidth=2 sts=2 expandtab smartindent
autocmd FileType yaml setlocal shiftwidth=2 sts=2 expandtab smartindent
autocmd FileType html setlocal shiftwidth=2 sts=2 expandtab smartindent
autocmd BufWritePost *.go lua vim.lsp.buf.formatting()
